Volvamos al control de flujo o "que pasa si x es verdadero o falso", el famoso "if" donde ponemos una condición a ver si se da. Pero que pasa si además de cómo nos sentimos esta mañana queremos además agregar el día, entonces si es sábado o domingo mejor no tomar café aunque estemos muy dormidos. Ahí entran.
`&&`: con dos condiciones && significa que las dos condiciones tienen que ser ciertas para que se ejecute esa orden, en el caso de la mañana deberá ser día de semana y muy cansado para tomar café.
`||`: con que se de alguna de las dos condiciones se ejecutará la orden, en el caso de la mañana si es día de semana o me levanté cansado, me hago un café. Domingo y estoy cansado: café, lunes y me levanté con mucha energía: café.
`!`: es la negación, se pone antes de la condición para negarla, entonces en vez de poner que tiene que ser día de semana le pongo !fin de semana, así quiero decir "no fin de semana".

`for` loop: Así como existe el "if" que controla el flujo de órdenes está el "for", estos son bucles, es decir que una vez ejecutada vuelve a ejecutarse hasta que la condición escrita sea falsa, PERO CUIDADO, podemos llegar a equivocarnos y hacer una condición que nunca cambie, lo que hará que la función se siga ejecutando hasta el infinito, lo que puede bloquear nuestra computadora.
Entonces un for loop se construye poniendo siempre una condición de comienzo (huevosgallina = 0), esta gallina nunca puso un huevo y va a comenzar, luego de un ';' ponemos la condición que va a detener el bucle (huevosgallina < 901), una vez que esta gallina ponga su huevo número 900 se detendrá la postura y cerramos después de un ";" con la actividad que ejecutará la función para avanzar en el loop (huevosgallina++), esto quiere decir que cada vez que se ejecute vamos a sumar 1 huevo a la gallina, así hasta llegar a 900.